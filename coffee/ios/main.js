// Generated by CoffeeScript 1.3.3
(function() {
  var DockIcon, Icon, Screen, Stage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Icon = (function() {

    function Icon(id, title) {
      this.id = id;
      this.title = title;
      this.markup = " <div class=\"icon\"  \nstyle=\"background-image:url(assets/img/icons/" + this.id + ".png\" \ntitle=\"" + this.title + "\"></div>";
    }

    return Icon;

  })();

  DockIcon = (function(_super) {

    __extends(DockIcon, _super);

    function DockIcon(id, title) {
      DockIcon.__super__.constructor.call(this, id, title);
      this.markup = this.markup.replace('class="icon"', 'class="dockicon"');
    }

    return DockIcon;

  })(Icon);

  Screen = (function() {

    function Screen(icons) {
      if (icons == null) {
        icons = [];
      }
      this.icons = icons;
    }

    Screen.prototype.attachIcon = function(icons) {
      if (icons == null) {
        icons = [];
      }
      return Array.prototype.push.apply(this.icons, icons);
    };

    Screen.prototype.generate = function() {
      var icon, markup, _i, _len, _ref;
      markup = [];
      _ref = this.icons;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        icon = _ref[_i];
        markup.push(icon.markup);
      }
      return " <div class=\"screen\">" + (markup.join('')) + "</div> ";
    };

    return Screen;

  })();

  Stage = (function() {

    Stage.prototype.screenWidth = 232;

    function Stage(icons) {
      var i, num, s;
      this.currentScreen = 0;
      this.screens = [];
      num = Math.ceil(icons.length / 9);
      i = 0;
      while (num--) {
        s = new Screen(icons.slice(i, i + 9));
        this.screens.push(s);
        i += 9;
      }
    }

    Stage.prototype.addScreensTo = function(element) {
      var screen, _i, _len, _ref, _results;
      this.element = $(element);
      this.element.width(this.screens.length * this.screenWidth);
      _ref = this.screens;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        screen = _ref[_i];
        _results.push(this.element.append(screen.generate()));
      }
      return _results;
    };

    Stage.prototype.addIndicatorsTo = function(element) {
      var screen, _i, _len, _ref;
      this.ul = $(element);
      _ref = this.screens;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        screen = _ref[_i];
        this.ul.append('<li>');
      }
      return this.ul.find('li:first').addClass('active');
    };

    Stage.prototype.goTo = function(screenNum) {
      var from, to, _ref, _ref1,
        _this = this;
      if (this.element.is(':animated')) {
        return false;
      }
      if (this.currentScreen === screenNum) {
        _ref = ['+=15', '-=15'], from = _ref[0], to = _ref[1];
        if (this.currentScreen !== 0) {
          _ref1 = [to, from], from = _ref1[0], to = _ref1[1];
        }
        return this.element.animate({
          marginLeft: from
        }, 150).animate({
          marginLeft: to
        }, 150);
      } else {
        this.element.animate({
          marginLeft: -screenNum * this.screenWidth
        }, function() {
          return _this.currentScreen = screenNum;
        });
        return this.ul.find('li').removeClass('active').eq(screenNum).addClass('active');
      }
    };

    Stage.prototype.next = function() {
      var toShow;
      toShow = this.currentScreen + 1;
      if (toShow === this.screens.length) {
        toShow = this.screens.length(-1);
      }
      return this.goTo(toShow);
    };

    Stage.prototype.previous = function() {
      var toShow;
      toShow = this.currentScreen - 1;
      if (toShow === -1) {
        toShow = 0;
      }
      return this.goTo(toShow);
    };

    return Stage;

  })();

  $(function() {
    /*
        icons =
            Photos: 'Photo Gallery',    Maps: 'Google Maps'
            Chuzzle: 'Chuzzle',         Safari: 'Safari'
            Weather: 'Weather',         nes: 'NES Emulator'
            Calendar: 'Calendar',       Clock: 'Clock'
            BossPrefs: 'Boss Prefs',    Chess: 'Chess'
            Mail: 'Mail',               Phone: 'Phone'
            SMS: 'SMS Center',          Camera: 'Camera'
            iPod: 'iPod',               Calculator: 'Calculator'
            Music: 'Music',             Poof: 'Poof'
            Settings: 'Settings',       YouTube: 'youtube'
            psx4all: 'PSx4All',         VideoRecorder: 'Record Video'
            Installer: 'Installer',     Notes: 'Notes'
            RagingThunder: 'RagingThunder', Stocks: 'Stocks'
            genesis4iphone: 'Genesis',  'snes4iphone', 'SNES Emulator'
            Calender: 'Calender',       Clock: 'Clock'
            Photos: 'Photo Gallery',    Maps: 'Google Maps'
    */

    /*
        console.log icons
        allIcons = [];
        for name, description of icons
            allIcons.push(new Icon(name, description))
    */

    var allIcons, allScreens, dock, dockIcons, icon, stage, _i, _len, _results;
    allIcons = [new Icon('Photos', 'Photo Gallery'), new Icon('Maps', 'Google Maps'), new Icon('Chuzzle', 'Chuzzle'), new Icon('Safari', 'Safari'), new Icon('Weather', 'Weather'), new Icon('nes', 'NES Emulator'), new Icon('Calendar', 'Calendar'), new Icon('Clock', 'Clock'), new Icon('BossPrefs', 'Boss Prefs'), new Icon('Chess', 'Chess'), new Icon('Mail', 'Mail'), new Icon('Phone', 'Phone'), new Icon('SMS', 'SMS Center'), new Icon('Camera', 'Camera'), new Icon('iPod', 'iPod'), new Icon('Calculator', 'Calculator'), new Icon('Music', 'Music'), new Icon('Poof', 'Poof'), new Icon('Settings', 'Settings'), new Icon('YouTube', 'Youtube'), new Icon('psx4all', 'PSx4All'), new Icon('VideoRecorder', 'Record Video'), new Icon('Installer', 'Installer'), new Icon('Notes', 'Notes'), new Icon('RagingThunder', 'RagingThunder'), new Icon('Stocks', 'Stocks'), new Icon('genesis4iphone', 'Genesis'), new Icon('snes4iphone', 'SNES Emulator'), new Icon('Calendar', 'Calendar'), new Icon('Clock', 'Clock'), new Icon('Photos', 'Photo Gallery'), new Icon('Maps', 'Google Maps')];
    dockIcons = [new DockIcon('Camera', 'Camera'), new DockIcon('iPod', 'iPod'), new DockIcon('Calculator', 'Calculator')];
    allScreens = $('#allScreens');
    allScreens.Touchable();
    stage = new Stage(allIcons);
    stage.addScreensTo(allScreens);
    stage.addIndicatorsTo('#indicators');
    allScreens.bind('touchablemove', function(e, touch) {
      if (touch.currentDelta.x < -5) {
        stage.next();
      }
      if (touch.currentDelta.x > 5) {
        return stage.previous;
      }
    });
    dock = $('#dock');
    _results = [];
    for (_i = 0, _len = dockIcons.length; _i < _len; _i++) {
      icon = dockIcons[_i];
      _results.push(dock.append(icon.markup));
    }
    return _results;
  });

}).call(this);
